<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <!-- ttLib visualizers -->

    <Type Name="ttCFile">
      <DisplayString>{m_pszLine,s}</DisplayString>
    </Type>

    <Type Name="ttCStr">
      <DisplayString>{m_psz,s}</DisplayString>
    </Type>

    <Type Name="ttCEnumStr">
      <DisplayString>{m_pszCur,s}</DisplayString>
    </Type>

    <Type Name="ttCWStr">
      <DisplayString>{m_psz,S}</DisplayString>
    </Type>

    <Type Name="ttCList">
      <DisplayString>{m_cItems,n}</DisplayString>
    </Type>

    <Type Name="ttCFindFile">
      <DisplayString>{cFileName,s}</DisplayString>
    </Type>

    <Type Name="ttCXMLBranch">
      <DisplayString>{pszName,s}, {pszData,s}</DisplayString>
    </Type>

    <!-- wxWidgets visualizers -->

    <!--
        We want to avoid showing 'L' before the string, this is useless and makes the display less readable. But we
        still do want to put quotes around the string to show that it is, in fact, a string. So we use "sb" qualifier to get
        rid of L"..." around the string and then add the quotes back. This also has a (nice) side effect of not doubling the
        backslashes inside the string.
    -->

    <Type Name="wxString">
        <DisplayString>"{m_impl,sb}"</DisplayString>
        <StringView>m_impl</StringView>
    </Type>

    <Type Name="wxPoint">
        <DisplayString>{x}, {y}</DisplayString>
    </Type>

    <Type Name="wxSize">
        <DisplayString>{x} × {y}</DisplayString>
    </Type>

    <Type Name="wxRect">
        <DisplayString>{x}, {y} {width} × {height}</DisplayString>
    </Type>

    <Type Name="wxLongLong">
        <DisplayString>{m_ll}</DisplayString>
    </Type>

    <Type Name="wxULongLong">
        <DisplayString>{m_ll}</DisplayString>
    </Type>

    <Type Name="wxArrayString">
        <DisplayString Condition="m_nCount==0">empty</DisplayString>
        <DisplayString Condition="m_nCount==1">{m_pItems[0]}</DisplayString>
        <DisplayString Condition="m_nCount==2">{m_pItems[0]} and {m_pItems[1]}</DisplayString>
        <DisplayString>size={m_nCount}: {m_pItems[0]}, {m_pItems[1]}, ...</DisplayString>
        <Expand>
            <ArrayItems>
                <Size>m_nCount</Size>
                <ValuePointer>m_pItems</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <!--
        Defining visualizer for wxListBase is not really useful, so do it for
        the most commonly used "concrete" list type.
     -->
    <Type Name="wxWindowList">
        <DisplayString>size={m_count}</DisplayString>
        <Expand>
            <Item Name="[size]">m_count</Item>
            <LinkedListItems>
                <Size>m_count</Size>
                <HeadPointer>m_nodeFirst</HeadPointer>
                <NextPointer>m_next</NextPointer>
                <ValueNode>(wxWindow*)m_data</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="wxVector&lt;*&gt;">
        <DisplayString>size={m_size}</DisplayString>
        <Expand>
            <Item Name="[size]">m_size</Item>
            <Item Name="[capacity]">m_capacity</Item>
            <ArrayItems>
                <Size>m_size</Size>
                <ValuePointer>m_values</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

</AutoVisualizer>
